/* Tu as lu le titre ? Allez, tu as 1h... ok on rigole üòÅ. 
L'un des premiers codes dont tu as entendu parler est probablement le code g√©n√©tique qui permet de traduire de l'ARN (c'est une copie de notre ADN) en prot√©ines (qui constituent notre corps). Pourquoi ne pas faire un exercice l√†-dessus ?

D'abord quelques explications (on va pas te faire un cours de bio complet). Pour simplifier, l'ARN (comme l'ADN) est une suite de mol√©cules appel√©es nucl√©otides et qu'on peut repr√©senter par 4 lettres : A - U - G - C (pour l'ADN, remplacer U par T). Donc un morceau d'ARN peut se repr√©senter sous la forme d'une suite de lettres : "UUACGCAGUAGA".

Notre corps est ensuite capable de lire cet ARN en le d√©coupant par groupes de 3 lettres (appel√©s "codons"). Dans notre exemple √ßa donnerait : "UUA-CGC-AGU-AGA". Ensuite chaque codon peut √™tre transform√© en un "acide amin√©" qui est juste un "morceau de prot√©ine". Mais quelle est la r√®gle qui dit que tel codon doit √™tre remplac√© par tel acide amin√© ? C'est le fameux code g√©n√©tique dont voici un extrait ci-dessous :

UCU ou UCC ou UCA ou UCG ou AGU ou AGC => S√©rine 
CCU ou CCC ou CCA ou CCG => Proline 
UUA ou UUG => Leucine 
UUU ou UUC => Ph√©nylalanine 
CGU ou CGC ou CGA ou CGG ou AGA ou AGG => Arginine 
UAU ou UAC => Tyrosine

Notre exemple d'ARN "UUA-CGC-AGU-AGA" donnerait donc la prot√©ine suivante : "Leucine-Arginine-S√©rine-Arginine"

Le code g√©n√©tique complet permet de transformer les 64 codons possibles en 20 acides amin√©s. On va se contenter, sur cet exercice, de prendre juste les 6 acides amin√©s ci-dessus avec leurs codons correspondants.

Je veux que tu codes un script script_6.js en JS qui puisse transformer un ARN pr√©sent√© sous forme de string "UUACGCAGUAGA" en une suite d'acides amin√©s que tu imprimeras en console : "Leucine-Arginine-S√©rine-Arginine"

Afin de comparer ton travail avec les autres moussaillons, voici 2 ARN √† traduire en prot√©ines :

CCGUCGUUGCGCUACAGC
CCUCGCCGGUACUUCUCG 
*/



let data
let data_name
function check_data(data){
  switch(data){
    default:
      data_name = "Unknown"
    case "UCU":
    case "UCC":
    case "UCA":
    case "UCG":
    case "AGU":
    case "AGC":
      data_name = "S√©rine"
      break
    case "CCU":
    case "CCC":
    case "CCA":
    case "CCG":
      data_name = "Proline"
      break
    case "UUA":
    case "UUG":
      data_name = "Leucine"
      break
    case "UUU":
    case "UUC":
      data_name = "Ph√©nylalanine"
      break
    case "CGU":
    case "CGC":
    case "CGA":
    case "CGG":
    case "AGA":
    case "AGG":
      data_name = "Arginine"
      break
    case "UAU":
    case "UAC":
      data_name = "Tyrosine"
      break
  }
  return data_name
}

function extract_from_string(string){
  let l = string.length
  console.log("Longueur : " + l)
  arr = []
  let j = 0
  let data
  for(i = 0; i < l; i += 3){ 
    data = string.substr(i,3)
    // console.log(data + " => " + check_data(data))
    arr[j] = check_data(data) 
    j ++
  }
  console.log("D√©cryptage :")
  console.log(arr.join('-'))
}
console.log("*".repeat(60))
console.log("# First: CCG-UCG-UUG-CGC-UAC-AGC")
extract_from_string("CCGUCGUUGCGCUACAGC")
console.log("*".repeat(60))
console.log("# Second: CCU-CGC-CGG-UAC-UUC-UCG")
extract_from_string("CCUCGCCGGUACUUCUCG")
console.log("*".repeat(60))
console.log("# Third: UUA-CGC-AGU-AGA")
extract_from_string("UUACGCAGUAGA")
console.log("*".repeat(60))